plugins {
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'
    id 'org.jetbrains.kotlin.kapt' version '1.2.71'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.2.71'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.2.71'
    id 'org.springframework.boot' version '2.0.3.RELEASE'
}

apply plugin: "io.spring.dependency-management"

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-freemarker')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-cache')

//    Kotlin
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('org.jetbrains.kotlin:kotlin-reflect')

//    Util
    compile('org.apache.commons:commons-lang3:3.7')
    compile('org.apache.commons:commons-collections4:4.0')
    compile('net.coobird:thumbnailator:0.4.8')
    compile('com.github.ben-manes.caffeine:caffeine:2.6.2')
    compile('com.amazonaws:aws-java-sdk-s3:1.11.461')

//    Swagger
    compile('io.springfox:springfox-swagger2:2.9.0')
    compile('io.springfox:springfox-swagger-ui:2.9.0')
    compile('org.webjars:swagger-ui:3.17.0')

//    DevTools
    runtime('org.springframework.boot:spring-boot-devtools')
    kapt('org.springframework.boot:spring-boot-configuration-processor')

//    Database
    compile('org.flywaydb:flyway-core')
    runtime('org.postgresql:postgresql')

//    Test
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.resources.srcDirs += '../front/build/resources'
}

// Front
processResources.dependsOn(':front:assemble')

build.doLast {
    def jarDir = "$projectDir/docker/jar"
    delete jarDir
    mkdir jarDir
    // copying *.jar
    copy {
        from "$buildDir/libs"
        into jarDir
    }
}